title: Election
on-arrival: {
    // calculate normalized class voting amounts (0 to 100)
    var class_normalized = {};
    for (var c of Q.classes) {
        var class_votes = 0;
        for (var party of Q.parties) {
            if (Q[c+'_'+party] < 0) {
                Q[c+'_'+party] = 0;
            }
            class_votes += Q[c+'_'+party];
        }
        class_normalized[c] = {};
        for (var party of Q.parties) {
            class_normalized[c][party] = class_votes > 0 ? (100 * Q[c+'_'+party] / class_votes) : 0;
        }
    }

    // 1. calculate support for each of the parties
    var total_support = 0;
    var party_supports = {};
    for (var party of Q.parties) {
        var party_support = 0;
        for (var c of Q.classes) {
            party_support += Q.old_demographics ? Q[c]*Q[c+'_'+party] : Q[c]*class_normalized[c][party];
        }
        party_supports[party] = party_support;
        total_support += party_support;
    }

    // 2. normalize support (fraction) and round to two decimals
    var sorted_parties = Q.parties.sort(function(a, b) { return party_supports[b] - party_supports[a]; });
    var total_votes = 0;
    for (var party of sorted_parties) {
        var normalized = Math.round((party_supports[party] / total_support * 100) * 100) / 100;
        total_votes += normalized;
        Q[party+'_votes'] = normalized;
    }

    // Adjust the last party's votes if necessary
    var discrepancy = 100 - total_votes;
    if (discrepancy !== 0) {
        var last_party = sorted_parties[sorted_parties.length - 1];
        Q[last_party+'_votes'] = Math.round((Q[last_party+'_votes'] + discrepancy) * 100) / 100;
    }
}
go-to: jumpScene
